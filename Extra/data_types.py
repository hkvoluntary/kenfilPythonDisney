# -*- coding: utf-8 -*-
"""Data_types.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SLx5jle0yN7Nrd8l8IasAAYXt8vvbtBc
"""

import numpy as np
import pandas as pd

df = pd.read_csv("./sales_data_types.csv")

df

df['2016'] + df['2017']

df.dtypes

df.info()

df['Customer Number'].astype('int') # to convert a pandas column of data to a different type is to use

df["Customer Number"] = df['Customer Number'].astype('int')
df.dtypes

df

#df['2016'].astype('float') #ValueError

#df['Jan Units'].astype('int') #ValueError

df['Active'].astype('bool')

"""astype() will only work if:

    the data is clean and can be simply interpreted as a number
    you want to convert a numeric value to a string object

Custom Conversion Functions
"""

def convert_currency(val):
    """
    Convert the string number value to a float
     - Remove $
     - Remove commas
     - Convert to float type
    """
    new_val = val.replace(',','').replace('$', '')
    return float(new_val)

df['2016'].apply(convert_currency)

df['2016'] = df['2016'].apply(convert_currency)
df['2017'] = df['2017'].apply(convert_currency)

df.dtypes

df

def convert_percent(val):
    """
    Convert the percentage string to an actual floating point percent
    - Remove %
    - Divide by 100 to make decimal
    """
    new_val = val.replace('%', '')
    return float(new_val) / 100

df['Percent Growth'].apply(convert_percent)

df['Percent Growth'] = df['Percent Growth'].apply(convert_percent)
df

df["Active"] = np.where(df["Active"] == "Y", True, False)

print(df)
print(df.dtypes)

pd.to_numeric(df['Jan Units']) # Raise the except - default value

pd.to_numeric(df['Jan Units'], errors='coerce') # set as NaN.

pd.to_numeric(df['Jan Units'], errors='coerce').fillna(0)
# it replaces the invalid “Closed” value with a NaN value because we passed errors=coerce .
# We can leave that value there or fill it in with a 0 using fillna(0)

pd.to_datetime(df[['Month', 'Day', 'Year']])

df["Start_Date"] = pd.to_datetime(df[['Month', 'Day', 'Year']])
df["Jan Units"] = pd.to_numeric(df['Jan Units'], errors='coerce').fillna(0)

df

df.dtypes

"""## Exercise 1

* Age is int64 type
** isinstance(val, str) to determine the val is string or not
** val.isdigit() to dterminte the string is digital or not


* Convert Month, Day and Year to datetime as Column ["End Date"]
* Convert Is_Employed to Boolean
* Convert None salary to zero using isna()
"""



import pandas as pd
import numpy as np
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],
    'Age': [25, 30, 35, "30", 40],
    'Salary': [50000.0, 60000.0, 70000.0, None, 80000.0],
    'Is_Employed': ['Yes', 'No', 'True', 'No', 'Yes'],
    'Month': [1, 6, 3, 12, 8],
    'Day': [1, 15, 10, 5, 20],
    'Year': [2020, 2019, 2021, 2020, 2018]
}

df1 = pd.DataFrame(data)

# Step 2: Display the DataFrame
print("DataFrame:")
print(df1)

df1.dtypes

def convert_str_to_int(val):
  print(val)
  if isinstance(val, str):
    if val.isdigit():
      return int(val)
  else:
    return val

df1['Age'] = df1['Age'].apply(convert_str_to_int)
df1.dtypes

df1["Is_Employed"] = np.where(df1["Is_Employed"] == "No", False, True)

df1

df1["End_Date"] = pd.to_datetime(df1[['Month', 'Day', 'Year']])
df1

df1['Salary'].isna()

df1["Salary"] = np.where(df1["Salary"].isna(), 0, df1["Salary"])

df1